@page "/deposit-calculator"
@inherits Base

@using BankingInformatics.Frontend.Models.Parameters
@using BankingInformatics.Frontend.Models
@using ChartJs.Blazor
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Util
@using System.Drawing
@using Blazored.LocalStorage

@inject ILocalStorageService LocalStorageService;


<PageTitle>Deposit calculator</PageTitle>

<div class="container-fluid">
    
    @if (Alert.Show)
    {
        <AlertMessage AlertType="@Alert.TypeString"
                      Title="@Alert.Title"
                      Message="@Alert.Message"></AlertMessage>
    }

    <div class="row mb-2">
        <div class="col-md-4">
            <h2 class="d-flex justify-content-start">Deposit parameters:</h2>

            <EditForm Model="_depositParameters" OnValidSubmit="CalculatePayments">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label class="fw-bold">Name: (used to identify saved parameters)</label>
                    <InputText @bind-Value="_depositParameters.Name" class="form-control mb-2"/>
                    <ValidationMessage For="() => _depositParameters.Name"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Date:</label>
                    <InputDate @bind-Value="_depositParameters.Date" class="form-control mb-2"
                               placeholder="0.00"/>
                    <ValidationMessage For="() => _depositParameters.Date"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Source sum:</label>
                    <InputNumber @bind-Value="_depositParameters.SourceSum" class="form-control mb-2"
                                 placeholder="0.00"/>
                    <ValidationMessage For="() => _depositParameters.SourceSum"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Months:</label>
                    <InputNumber @bind-Value="_depositParameters.Months" class="form-control mb-2"
                                 placeholder="0"/>
                    <ValidationMessage For="() => _depositParameters.Months"/>
                </div>
                <div class="form-group">
                    <label class="fw-bold">Percent (%):</label>
                    <InputNumber @bind-Value="_depositParameters.Percent" class="form-control mb-2"
                                 placeholder="0.00"/>
                    <ValidationMessage For="() => _depositParameters.Months"/>
                </div>

                <div class="mb-2">
                    <button type="submit" class="btn btn-dark">Calculate</button>
                    <button type="submit" class="btn btn-dark" @onclick="SaveCurrentParametersAsync">Save</button>
                </div>

            </EditForm>
        </div>
        
        <div class="col-md-8">
            <h2 class="d-flex justify-content-center">Deposit states:</h2>
            <table class="table">
                <thead class="mb-1">
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Sum</th>
                    <th scope="col">Percent part</th>
                </tr>
                </thead>
                @foreach (var payment in _paymentCollection.DepositPayments)
                {
                    <tr class="mb-1">
                        <td scope="row">@payment.Date.ToString("yyyy-MM-dd")</td>
                        <td>@payment.Sum</td>
                        <td>@payment.PercentSum</td>
                    </tr>
                }
                <tr class="mb-1">
                    <td scope="row" class="fw-bold">Total:</td>
                    <td class="fw-bold">@_paymentCollection.TotalSum</td>
                    <td class="fw-bold">@_paymentCollection.TotalPercentSum</td>
                </tr>
            </table>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-4">
            @foreach (var parametersRow in _savedParameters
                .Select(item => (item.Key, Card: new DepositParametersCard
                {
                    Title = item.Parameters.Name.CutIfMoreThan(20),
                    TextAreas = new []
                    {
                        $"Source sum: {item.Parameters.SourceSum}",
                        $"Months: {item.Parameters.Months}",
                        $"Percent: {item.Parameters.Percent}"
                    },
                    DepositParameters = item.Parameters
                }))
                .SepareteIntoRows(3))
            {
                <div class="row mb-2">
                    @foreach (var (cardItem, _, columnWidth) in parametersRow)
                    {
                        <CardBox Width="@columnWidth"
                                 Title="@cardItem.Card.Title"
                                 SubTitle="@cardItem.Card.Subtitle"
                                 TextAreas="@cardItem.Card.TextAreas"
                                 Buttons="@(new[] { new CardBox.Button(CardBox.ButtonType.Success, "Copy", OnClick: _ => SetParameters(cardItem.Card.DepositParameters)), new CardBox.Button(CardBox.ButtonType.Danger, "Remove", OnClick: _ => DeleteParametersFromSaves(cardItem.Key)) })"/>
                    }
                </div>
            }
        </div>
        <div class="col-md-8">
            @if (_lineConfig is not null && _chart is not null)
            {
                <Chart Config="_lineConfig" @ref="_chart"></Chart>
            }
        </div>
    </div>

</div>

@code
{
    private Chart? _chart;
    private LineConfig? _lineConfig;

    private DepositParameters _depositParameters = new() { Date = DateOnly.FromDateTime(DateTime.UtcNow) };
    private DepositPaymentCollection _paymentCollection = new()
    {
        DepositPayments = Array.Empty<DepositPayment>()
    };

    private IReadOnlyCollection<(string Key, DepositParameters Parameters)> _savedParameters =
        Array.Empty<(string Key, DepositParameters Parameters)>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateSavedParametersAsync();

        _lineConfig = GetLineConfig();
        _lineConfig.Data.Datasets.Add(new LineDataset<TimePoint>(Enumerable
            .Range(0, 1)
            .Select(_ => new TimePoint(DateOnly.MinValue.ToDateTime(TimeOnly.MinValue), 0)))
        {
            Label = "Diposit sums",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Green),
            BorderColor = ColorUtil.FromDrawingColor(Color.Green),
            Fill = FillingMode.Disabled
        });
        _chart = new Chart { Config = _lineConfig };
        
        await base.OnInitializedAsync();
    }

    private void CalculatePayments()
    {
        _lineConfig!.Data.Datasets.Clear();
        _chart!.Update();
        StateHasChanged();

        _paymentCollection = Calculators.DepositCalculator.CalculateDepositPayments(_depositParameters);
        var dataset = new LineDataset<TimePoint>(_paymentCollection.DepositPayments
            .Select(payment => new TimePoint(payment.Date.ToDateTime(TimeOnly.MinValue), (double)payment.Sum)))
        {
            Label = "Diposit sums",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Green),
            BorderColor = ColorUtil.FromDrawingColor(Color.Green),
            Fill = FillingMode.Disabled
        };
        _lineConfig.Data.Datasets.Add(dataset);
        _chart.Update();
        
        StateHasChanged();
    }
    
    private async ValueTask UpdateSavedParametersAsync()
    {
        _savedParameters = await (await LocalStorageService
            .KeysAsync())
            .Where(key => key.StartsWith(nameof(DepositParameters)))
            .ToAsyncEnumerable()
            .SelectAwait(async key => (Key: key, Parameters: await LocalStorageService.GetItemAsync<DepositParameters>(key)))
            .ToArrayAsync();
    }

    private async ValueTask SetParameters(DepositParameters parameters)
    {
        _depositParameters = parameters;
        StateHasChanged();
    }

    private async ValueTask DeleteParametersFromSaves(string key)
    {
        await LocalStorageService.RemoveItemAsync(key);
        await UpdateSavedParametersAsync();
        StateHasChanged();
    }

    private async Task SaveCurrentParametersAsync()
    {
        var key = $"{nameof(DepositParameters)}{_depositParameters.Name}{Guid.NewGuid()}";

        await LocalStorageService.SetItemAsync(key, _depositParameters);
        await UpdateSavedParametersAsync();
    }
    
    private static LineConfig GetLineConfig() => new()
    {
        Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Deposit states graph"
            },
            Scales = new Scales
            {
                XAxes = new List<CartesianAxis>
                {
                    new TimeAxis
                    {
                        ScaleLabel = new ScaleLabel{ LabelString = "Dates" },
                        Time = new TimeOptions
                        {
                            Unit = TimeMeasurement.Month,
                        }
                    }
                },
                YAxes = new List<CartesianAxis>
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel { LabelString = "Deposit sums" }
                    }
                }
            }
        }
    };

    private record DepositParametersCard : Card
    {
        public DepositParameters DepositParameters { get; init; } = null!;
    }
}